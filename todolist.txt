# Rust TOML Parser - Multi-Format Support TODO

## High Priority: Format Abstraction

### 1. Create Generic Traits
- [ ] **ConfigValue trait** - Abstract over toml::Value, serde_json::Value, serde_yaml::Value
  - Methods: as_integer(), as_float(), as_string(), as_table(), as_array()
  - Error handling for type conversions

- [ ] **ConfigTable trait** - Abstract over toml::Table, json::Map, yaml::Mapping  
  - Methods: get(), get_mut(), insert(), contains_key(), iter(), iter_mut()
  - Should support recursive traversal

- [ ] **ConfigParser trait** - Abstract over parsing different formats
  - Methods: from_str() -> Result<ConfigValue, Error>

### 2. Refactor Layout Module (src/layout/)

#### mod.rs Changes:
- [ ] **Make FlashBlock generic**: `FlashBlock<T: ConfigTable>`
- [ ] **Replace RefCell<toml::Table>** with `RefCell<T>`
- [ ] **Add format-specific constructors**: from_toml(), from_json(), from_yaml()
- [ ] **Update return types**: `std::cell::Ref<T>` instead of `std::cell::Ref<toml::Table>`
- [ ] **Move recursive walk logic** from variants to here
- [ ] **Add populate_from_datasheet()** method that takes `&DataSheet`

#### conversions.rs Changes:
- [ ] **Generalize extract_uint()** - work on ConfigValue trait
- [ ] **Generalize extract_datavalue()** - work on ConfigValue trait  
- [ ] **Generalize extract_table()** - return ConfigTable trait object
- [ ] **Generalize extract_string()** - work on ConfigValue trait
- [ ] **Generalize extract_crc_location()** - work on ConfigValue trait
- [ ] **Create format-specific implementations** for each trait

#### types.rs Changes:
- [ ] **Replace from_toml_cell()** with generic `from_config_cell()`
- [ ] **Generalize parse_uint/int/float()** - work on ConfigValue trait
- [ ] **Generalize TypeSpec::from_value()** - work on ConfigValue trait
- [ ] **Generalize extract_datavalues()** - work on ConfigValue trait
- [ ] **Remove direct toml::Table::new()** usage

### 3. Refactor Variants Module (src/variants/)

#### mod.rs Changes:
- [ ] **Remove walk_data_section()** - move to layout module
- [ ] **Remove single_data_to_toml()** - replace with generic conversion
- [ ] **Keep DataSheet immutable** - only reads Excel data
- [ ] **Add lookup_value()** method for layout to call during walk
- [ ] **Generalize data conversion** - return generic ConfigValue instead of toml::Value

## Medium Priority: Implementation Support

### 4. Add New Format Support
- [ ] **Add serde_json dependency** to Cargo.toml
- [ ] **Add serde_yaml dependency** to Cargo.toml  
- [ ] **Implement ConfigValue for serde_json::Value**
- [ ] **Implement ConfigTable for serde_json::Map**
- [ ] **Implement ConfigParser for JSON**
- [ ] **Implement ConfigValue for serde_yaml::Value**
- [ ] **Implement ConfigTable for serde_yaml::Mapping**
- [ ] **Implement ConfigParser for YAML**

### 5. Create Factory Pattern
- [ ] **Add ConfigFormat enum** (Toml, Json, Yaml)
- [ ] **Create load_flash_block()** factory function
- [ ] **Add format detection** from file extension
- [ ] **Update main.rs** to use factory pattern

## Low Priority: Code Quality

### 6. Error Handling
- [ ] **Create unified error types** across formats
- [ ] **Map format-specific errors** to common error enum
- [ ] **Improve error messages** with format context

### 7. Testing
- [ ] **Create test files** in JSON and YAML formats
- [ ] **Add integration tests** for each format
- [ ] **Test multi-block scenarios** with shared DataSheet
- [ ] **Add performance benchmarks** for different formats

### 8. Documentation
- [ ] **Document trait interfaces** with examples
- [ ] **Add format support guide** 
- [ ] **Create migration guide** from TOML-only version
- [ ] **Add examples** for each supported format

## Architecture Notes

**DataSheet Immutability**: âœ… DataSheet can remain immutable since it only reads Excel data and provides lookup functionality. Perfect for passing as `&DataSheet` to multiple FlashBlock instances.

**Recursive Walk Location**: Move from variants::DataSheet to layout::FlashBlock since layout owns the semantic understanding of the configuration structure.

**Multiple Blocks Support**: The reference-based DataSheet approach allows one Excel file to populate multiple blocks from the same TOML/JSON/YAML file.

**Trait Object Strategy**: Consider using trait objects (`Box<dyn ConfigTable>`) vs generics depending on runtime format detection needs.